import 'package:drift/drift.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/foundation.dart'; // For debugPrint
import 'package:drift_flutter/drift_flutter.dart';
import 'dao/podcasts_dao.dart';
import 'dao/played_history_episode_dao.dart';
import 'dao/episodes_dao.dart';
import 'tables/podcasts.dart';
import 'tables/played_history_episodes.dart';
import 'tables/episodes.dart';
import 'type_converters.dart';

part 'app_database.g.dart'; // Generated by build_runner

@DriftDatabase(tables: [Podcasts, PlayedHistoryEpisodes, Episodes], daos: [PodcastsDao, PlayedHistoryEpisodesDao, EpisodesDao])
class AppDatabase extends _$AppDatabase {
  AppDatabase([QueryExecutor? executor]) : super(executor ?? _openConnection());

  // Schema version. Increment this when you change the schema.
  @override
  int get schemaVersion => 1; // Start with 1, or 2 if tables added sequentially

  static QueryExecutor _openConnection() {
    return driftDatabase(
      name: 'podsink2',
      native: const DriftNativeOptions(
        // By default, `driftDatabase` from `package:drift_flutter` stores the
        // database files in `getApplicationDocumentsDirectory()`.
        databaseDirectory: getApplicationSupportDirectory,
      ),
      // If you need web support, see https://drift.simonbinder.eu/platforms/web/
    );
  }

  @override
  MigrationStrategy get migration {
    return MigrationStrategy(
      onCreate: (Migrator m) async {
        debugPrint("Drift: onCreate - creating all tables for version $schemaVersion");
        await m.createAll(); // Creates all tables defined in the @DriftDatabase annotation
      },
      onUpgrade: (Migrator m, int from, int to) async {
        debugPrint("Drift: onUpgrade - migrating from $from to $to");
        // Example: If PlayedHistory table was added in version 2
        //if (from < 2) {
        //  await m.createTable(playedHistoryEpisodes);
        //   debugPrint("Drift: Created playedHistory table during upgrade.");
        //}
        // Add other migration steps for future versions here
        // if (from < 3) {
        //   await m.addColumn(podcasts, podcasts.someNewColumn);
        // }
      },
      // beforeOpen: (details) async {
      //   if (details.wasCreated) {
      //     debugPrint("Drift: Database was freshly created at version ${details.newVersion}");
      //   } else if (details.hadUpgrade) {
      //     debugPrint("Drift: Database was upgraded from ${details.versionBefore} to ${details.versionNow}");
      //   }
      //   // You can also PRAGMA foreign_keys=ON here if needed
      //   await customStatement('PRAGMA foreign_keys = ON');
      // }
    );
  }
}
